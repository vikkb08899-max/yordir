require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TronWeb = require('tronweb');
const app = express();
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TronWeb (–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Shasta)
const PRIVATE_KEY = process.env.PRIVATE_KEY || '01234567890abcdef01234567890abcdef01234567890abcdef01234567890abc';
const WALLET_ADDRESS = process.env.WALLET_ADDRESS || 'TW5PbcV4RumU9pZBZ4sB1gZf4VgaLR8DXK';
const USDT_CONTRACT = process.env.USDT_CONTRACT || 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t';

const tronWeb = new TronWeb({
  fullHost: 'https://api.shasta.trongrid.io',
  privateKey: PRIVATE_KEY
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
let currentRates = {}; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let currentExchangeRates = {}; // –ü—Ä—è–º—ã–µ –∫—É—Ä—Å—ã –ø–∞—Ä
let currentMargins = {
  'TRX-USDT': 2,
  'USDT-TRX': 3,
  'TRX-EUR': 5,
  'EUR-TRX': 7,
  'TRX-GBP': 4,
  'GBP-TRX': 6,
  'USDT-EUR': 3,
  'EUR-USDT': 5,
  'USDT-GBP': 4,
  'GBP-USDT': 6,
  'BTC-EUR': 2,
  'EUR-BTC': 3,
  'ETH-EUR': 2,
  'EUR-ETH': 3,
  'USDC-EUR': 3,
  'EUR-USDC': 5
};

let lastRatesUpdate = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Å Binance
async function updateExchangeRates() {
  console.log(`[${new Date().toLocaleTimeString()}] –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã —Å Binance...`);
  
  return new Promise((resolve) => {
    const options = {
      hostname: 'api.binance.com',
      path: '/api/v3/ticker/price',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TRX-Exchange-Platform/1.0'
      },
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          if (res.statusCode !== 200) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${res.statusCode}`);
            resolve();
            return;
          }

          const priceData = JSON.parse(data);
          
          // –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä—ã
          priceData.forEach(item => {
            switch(item.symbol) {
              case 'TRXUSDT':
                currentExchangeRates['TRX-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-TRX'] = 1 / parseFloat(item.price);
                break;
              case 'BTCUSDT':
                currentExchangeRates['BTC-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-BTC'] = 1 / parseFloat(item.price);
                break;
              case 'ETHUSDT':
                currentExchangeRates['ETH-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-ETH'] = 1 / parseFloat(item.price);
                break;
              case 'USDCUSDT':
                currentExchangeRates['USDC-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-USDC'] = 1 / parseFloat(item.price);
                break;
              case 'EURUSDT':
                currentExchangeRates['EUR-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-EUR'] = 1 / parseFloat(item.price);
                break;
              case 'GBPUSDT':
                currentExchangeRates['GBP-USDT'] = parseFloat(item.price);
                currentExchangeRates['USDT-GBP'] = 1 / parseFloat(item.price);
                break;
            }
          });

          // –í—ã—á–∏—Å–ª—è–µ–º –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ USDT
          if (currentExchangeRates['TRX-USDT'] && currentExchangeRates['EUR-USDT']) {
            currentExchangeRates['TRX-EUR'] = currentExchangeRates['TRX-USDT'] / currentExchangeRates['EUR-USDT'];
            currentExchangeRates['EUR-TRX'] = currentExchangeRates['EUR-USDT'] / currentExchangeRates['TRX-USDT'];
          }
          
          if (currentExchangeRates['TRX-USDT'] && currentExchangeRates['GBP-USDT']) {
            currentExchangeRates['TRX-GBP'] = currentExchangeRates['TRX-USDT'] / currentExchangeRates['GBP-USDT'];
            currentExchangeRates['GBP-TRX'] = currentExchangeRates['GBP-USDT'] / currentExchangeRates['TRX-USDT'];
          }

          if (currentExchangeRates['BTC-USDT'] && currentExchangeRates['EUR-USDT']) {
            currentExchangeRates['BTC-EUR'] = currentExchangeRates['BTC-USDT'] / currentExchangeRates['EUR-USDT'];
            currentExchangeRates['EUR-BTC'] = currentExchangeRates['EUR-USDT'] / currentExchangeRates['BTC-USDT'];
          }

          if (currentExchangeRates['ETH-USDT'] && currentExchangeRates['EUR-USDT']) {
            currentExchangeRates['ETH-EUR'] = currentExchangeRates['ETH-USDT'] / currentExchangeRates['EUR-USDT'];
            currentExchangeRates['EUR-ETH'] = currentExchangeRates['EUR-USDT'] / currentExchangeRates['ETH-USDT'];
          }

          if (currentExchangeRates['USDC-USDT'] && currentExchangeRates['EUR-USDT']) {
            currentExchangeRates['USDC-EUR'] = currentExchangeRates['USDC-USDT'] / currentExchangeRates['EUR-USDT'];
            currentExchangeRates['EUR-USDC'] = currentExchangeRates['EUR-USDT'] / currentExchangeRates['USDC-USDT'];
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          if (currentExchangeRates['TRX-USDT']) {
            currentRates = {
              TRX_TO_USDT: currentExchangeRates['TRX-USDT'],
              USDT_TO_TRX: currentExchangeRates['USDT-TRX']
            };
          }

          lastRatesUpdate = new Date();
          console.log(`‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã [${lastRatesUpdate.toLocaleTimeString()}]`);
          console.log(`   TRX/USDT: ${currentExchangeRates['TRX-USDT']?.toFixed(6) || 'N/A'}`);
          console.log(`   EUR/USDT: ${currentExchangeRates['EUR-USDT']?.toFixed(4) || 'N/A'}`);
          console.log(`   USDT/EUR: ${currentExchangeRates['USDT-EUR']?.toFixed(4) || 'N/A'}`);
          
          resolve();

        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—É—Ä—Å–æ–≤:', error.message);
          resolve();
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤:', error.message);
      resolve();
    });

    req.on('timeout', () => {
      console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤');
      req.destroy();
      resolve();
    });

    req.end();
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(cors());
app.use(express.json());

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
app.get('/crypto-fiat-rate/:from/:to', async (req, res) => {
  const { from, to } = req.params;
  const pair = `${from.toUpperCase()}-${to.toUpperCase()}`;
  
  try {
    const baseRate = currentExchangeRates[pair];
    const margin = currentMargins[pair] || 0;
    
    if (!baseRate) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: ${pair}`
      });
    }

    const finalRate = baseRate * (1 + margin / 100);
    
    res.json({
      success: true,
      pair: pair,
      baseRate: parseFloat(baseRate.toFixed(8)),
      margin: margin,
      finalRate: parseFloat(finalRate.toFixed(8)),
      lastUpdate: lastRatesUpdate
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
app.get('/exchange-rates', (req, res) => {
  res.json({
    success: true,
    exchangeRates: currentExchangeRates,
    margins: currentMargins,
    lastUpdate: lastRatesUpdate
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Ü–µ–Ω–æ–∫
app.get('/margins', (req, res) => {
  res.json({
    success: true,
    margins: currentMargins,
    lastUpdate: lastRatesUpdate
  });
});

// API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏
app.post('/margins/:pair', (req, res) => {
  const { pair } = req.params;
  const { margin } = req.body;
  
  if (typeof margin !== 'number' || margin < 0 || margin > 50) {
    return res.status(400).json({
      success: false,
      error: '–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 50'
    });
  }
  
  currentMargins[pair.toUpperCase()] = margin;
  
  res.json({
    success: true,
    pair: pair.toUpperCase(),
    margin: margin
  });
});

// –°—Ç–∞—Ä—ã–µ API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.get('/rates', (req, res) => {
  res.json(currentRates);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initializeServer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
  const address = tronWeb.address.fromPrivateKey(PRIVATE_KEY);
  console.log('üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:', address);
  console.log('üîó –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (HEX):', tronWeb.address.toHex(address));
  
  // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
  await updateExchangeRates();
  console.log('–ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(updateExchangeRates, 60000);
}

initializeServer().catch(console.error); 