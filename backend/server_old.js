require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TronWeb = require('tronweb');
const app = express();
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TronWeb (–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Shasta)
const PRIVATE_KEY = process.env.PRIVATE_KEY || '01234567890abcdef01234567890abcdef01234567890abcdef01234567890abc'; // –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
const WALLET_ADDRESS = process.env.WALLET_ADDRESS || 'TW5PbcV4RumU9pZBZ4sB1gZf4VgaLR8DXK'; // –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
const USDT_CONTRACT = process.env.USDT_CONTRACT || 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'; // –ö–æ–Ω—Ç—Ä–∞–∫—Ç USDT –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏

const tronWeb = new TronWeb({
  fullHost: 'https://api.shasta.trongrid.io', // –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å Shasta
  privateKey: PRIVATE_KEY
});

// –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
const EXCHANGE_RATES = {
  TRX_TO_USDT: 0.085,  // 1 TRX = 0.085 USDT (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
  USDT_TO_TRX: 11.76   // 1 USDT = 11.76 TRX (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
};

// –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å Binance)
let currentExchangeRates = {
  // Crypto pairs
  'TRXUSDT': 0.085,
  'BTCUSDT': 43000,
  'ETHUSDT': 2500,
  'USDCUSDT': 1.0,
  // Fiat pairs (EUR/USD, GBP/USD)
  'EURUSD': 1.08,
  'GBPUSD': 1.26
};

// –ù–∞—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const TRADING_MARGINS = {
  // Crypto to Fiat
  'TRX-EUR': 5,
  'TRX-USD': 5,
  'TRX-GBP': 5,
  'USDT-EUR': 3,
  'USDT-USD': 3,
  'USDT-GBP': 3,
  'BTC-EUR': 2,
  'BTC-USD': 2,
  'BTC-GBP': 2,
  'ETH-EUR': 2,
  'ETH-USD': 2,
  'ETH-GBP': 2,
  'USDC-EUR': 3,
  'USDC-USD': 3,
  'USDC-GBP': 3,
  // Fiat to Crypto (–æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã)
  'EUR-TRX': 7,
  'USD-TRX': 7,
  'GBP-TRX': 7,
  'EUR-USDT': 5,
  'USD-USDT': 5,
  'GBP-USDT': 5,
  'EUR-BTC': 3,
  'USD-BTC': 3,
  'GBP-BTC': 3,
  'EUR-ETH': 3,
  'USD-ETH': 3,
  'GBP-ETH': 3,
  'EUR-USDC': 5,
  'USD-USDC': 5,
  'GBP-USDC': 5
};

// –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let lastRatesUpdate = null;
let currentRates = { ...EXCHANGE_RATES };
let currentCryptoRates = { ...CRYPTO_RATES };
let currentFiatRates = { ...FIAT_RATES };
let currentMargins = { ...TRADING_MARGINS };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
async function updateExchangeRates() {
  console.log(`[${new Date().toLocaleTimeString()}] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤—Å–µ—Ö –≤–∞–ª—é—Ç...`);
  
  return new Promise((resolve, reject) => {
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    const cryptoOptions = {
      hostname: 'api.coingecko.com',
      path: '/api/v3/simple/price?ids=tron,bitcoin,ethereum,tether,usd-coin&vs_currencies=usd',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TRX-Exchange-Platform/1.0'
      },
      timeout: 10000
    };

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    const cryptoReq = https.request(cryptoOptions, (res) => {
      let cryptoData = '';
      
      res.on('data', (chunk) => {
        cryptoData += chunk;
      });
      
      res.on('end', () => {
        try {
          if (res.statusCode !== 200) {
            console.error(`–û—à–∏–±–∫–∞ HTTP: ${res.statusCode} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`);
            resolve({ currentRates, currentCryptoRates, currentFiatRates });
            return;
          }

          const cryptoPriceData = JSON.parse(cryptoData);
          console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', cryptoPriceData);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
          if (cryptoPriceData.tron?.usd) {
            currentCryptoRates.TRX = parseFloat(cryptoPriceData.tron.usd);
          }
          if (cryptoPriceData.bitcoin?.usd) {
            currentCryptoRates.BTC = parseFloat(cryptoPriceData.bitcoin.usd);
          }
          if (cryptoPriceData.ethereum?.usd) {
            currentCryptoRates.ETH = parseFloat(cryptoPriceData.ethereum.usd);
          }
          if (cryptoPriceData.tether?.usd) {
            currentCryptoRates.USDT = parseFloat(cryptoPriceData.tether.usd);
          }
          if (cryptoPriceData['usd-coin']?.usd) {
            currentCryptoRates.USDC = parseFloat(cryptoPriceData['usd-coin'].usd);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          if (currentCryptoRates.TRX > 0) {
            const trxToUsdt = parseFloat(currentCryptoRates.TRX.toFixed(6));
            const usdtToTrx = parseFloat((1 / currentCryptoRates.TRX).toFixed(6));
            
            currentRates = {
              TRX_TO_USDT: trxToUsdt,
              USDT_TO_TRX: usdtToTrx
            };
          }

          // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
          getFiatRates().then(() => {
            lastRatesUpdate = new Date();
            
            console.log(`‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã [${lastRatesUpdate.toLocaleTimeString()}]:`);
            console.log(`   –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:`, currentCryptoRates);
            console.log(`   –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:`, currentFiatRates);
            
            resolve({ currentRates, currentCryptoRates, currentFiatRates });
          }).catch(() => {
            resolve({ currentRates, currentCryptoRates, currentFiatRates });
          });
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', error);
          resolve({ currentRates, currentCryptoRates, currentFiatRates });
        }
      });
    });
    
    cryptoReq.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', error.message);
      resolve({ currentRates, currentCryptoRates, currentFiatRates });
    });

    cryptoReq.on('timeout', () => {
      console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç');
      cryptoReq.destroy();
      resolve({ currentRates, currentCryptoRates, currentFiatRates });
    });
    
    cryptoReq.setTimeout(10000);
    cryptoReq.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
async function getFiatRates() {
  return new Promise((resolve, reject) => {
    const fiatOptions = {
      hostname: 'api.exchangerate-api.com',
      path: '/v4/latest/USD',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TRX-Exchange-Platform/1.0'
      },
      timeout: 8000
    };

    const fiatReq = https.request(fiatOptions, (res) => {
      let fiatData = '';
      
      res.on('data', (chunk) => {
        fiatData += chunk;
      });
      
      res.on('end', () => {
        try {
          if (res.statusCode !== 200) {
            console.error(`–û—à–∏–±–∫–∞ HTTP: ${res.statusCode} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç`);
            resolve(currentFiatRates);
            return;
          }

          const fiatPriceData = JSON.parse(fiatData);
          
          if (fiatPriceData.rates) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç (–≤—Å–µ –∫ USD)
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 USD = X EUR, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ: 1 EUR = Y USD
            currentFiatRates.USD = 1.0;
            if (fiatPriceData.rates.EUR) {
              currentFiatRates.EUR = 1 / parseFloat(fiatPriceData.rates.EUR); // 1 EUR = Y USD
            }
            if (fiatPriceData.rates.GBP) {
              currentFiatRates.GBP = 1 / parseFloat(fiatPriceData.rates.GBP); // 1 GBP = Y USD
            }

            console.log('üí± –ö—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', currentFiatRates);
            resolve(currentFiatRates);
          } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç');
            resolve(currentFiatRates);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç:', error);
          resolve(currentFiatRates);
        }
      });
    });

    fiatReq.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç:', error.message);
      resolve(currentFiatRates);
    });

    fiatReq.on('timeout', () => {
      console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç');
      fiatReq.destroy();
      resolve(currentFiatRates);
    });
    
    fiatReq.setTimeout(8000);
    fiatReq.end();
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –∑–∞—Ç–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
updateExchangeRates()
  .then(() => {
    console.log('–ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(updateExchangeRates, 60 * 1000); // 1 –º–∏–Ω—É—Ç–∞
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
  });

// –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±—ã –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const exchangeRequests = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–æ–º–æ—â—å—é TronGrid API
async function getIncomingTransactions(address) {
  return new Promise((resolve, reject) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ HTTPS –≤–º–µ—Å—Ç–æ axios –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const options = {
      hostname: 'api.shasta.trongrid.io',
      path: `/v1/accounts/${address}/transactions?only_to=true&limit=20`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'TRON-PRO-API-KEY': process.env.TRON_API_KEY || ''
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const transactions = JSON.parse(data);
          console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${transactions.data ? transactions.data.length : 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ TronGrid API`);
          resolve(transactions.data || []);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ TronGrid:', error);
          resolve([]);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ TronGrid:', error);
      resolve([]);
    });
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞
async function getTRC20Transactions(address) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.shasta.trongrid.io',
      path: `/v1/accounts/${address}/transactions/trc20?limit=20`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'TRON-PRO-API-KEY': process.env.TRON_API_KEY || ''
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const transactions = JSON.parse(data);
          console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${transactions.data ? transactions.data.length : 0} TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ TronGrid API`);
          resolve(transactions.data || []);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ TRC20 TronGrid:', error);
          resolve([]);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ TRC20 TronGrid:', error);
      resolve([]);
    });
    
    req.end();
  });
}

// Middleware
app.use(cors());
app.use(express.json());

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ –±–∞–ª–∞–Ω—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
app.get('/wallet-info', async (req, res) => {
  try {
    const balance = await tronWeb.trx.getBalance(WALLET_ADDRESS);
    let usdtBalance = '0';
    
    try {
      const usdtContract = await tronWeb.contract().at(USDT_CONTRACT);
      const usdtResult = await usdtContract.balanceOf(WALLET_ADDRESS).call();
      usdtBalance = tronWeb.fromSun(usdtResult);
    } catch (usdtError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ USDT:', usdtError);
    }
    
    res.json({
      success: true,
      address: WALLET_ADDRESS,
      hexAddress: tronWeb.address.toHex(WALLET_ADDRESS),
      trxBalance: tronWeb.fromSun(balance),
      usdtBalance,
      network: 'shasta testnet',
      isPrivateKeyValid: !!tronWeb.defaultPrivateKey
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
app.post('/check-transaction', async (req, res) => {
  const { txHash, requestId } = req.body;
  
  if (!txHash) {
    return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Ö–µ—à—É
    const txInfo = await tronWeb.trx.getTransaction(txHash);
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', JSON.stringify(txInfo));
    
    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –µ—Å—Ç—å requestId, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    if (txInfo && requestId && exchangeRequests.has(requestId)) {
      const request = exchangeRequests.get(requestId);
      
      if (request.from === 'TRX') {
        await processTrxPayment(request, txInfo);
        return res.json({ 
          success: true, 
          message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
          request: {
            status: request.status,
            txHash: request.txHash
          }
        });
      } else if (request.from === 'USDT') {
        await processUsdtPayment(request, { result: { to: WALLET_ADDRESS } });
        return res.json({ 
          success: true, 
          message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
          request: {
            status: request.status,
            txHash: request.txHash
          }
        });
      }
    }
    
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    res.json({ success: true, transaction: txInfo });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
app.post('/simulate-payment', async (req, res) => {
  const { requestId } = req.body;
  
  if (!requestId || !exchangeRequests.has(requestId)) {
    return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  const request = exchangeRequests.get(requestId);
  
  try {
    if (request.to === 'TRX') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TRX
      console.log(`–°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${request.toAmount} TRX –Ω–∞ –∞–¥—Ä–µ—Å ${request.destinationAddress}`);
      const tx = await tronWeb.trx.sendTransaction(
        request.destinationAddress,
        tronWeb.toSun(request.toAmount)
      );
      
      console.log(`TRX —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${JSON.stringify(tx)}`);
      
      request.status = 'completed';
      request.txHash = tx.txid;
      exchangeRequests.set(requestId, request);
      
      res.json({ success: true, txHash: tx.txid });
    } else if (request.to === 'USDT') {
      console.log(`–°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${request.toAmount} USDT –Ω–∞ –∞–¥—Ä–µ—Å ${request.destinationAddress}`);
      const usdtContract = await tronWeb.contract().at(USDT_CONTRACT);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º USDT
      const tx = await usdtContract.transfer(
        request.destinationAddress,
        tronWeb.toSun(request.toAmount)
      ).send();
      
      console.log(`USDT —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${tx}`);
      
      request.status = 'completed';
      request.txHash = tx;
      exchangeRequests.set(requestId, request);
      
      res.json({ success: true, txHash: tx });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.post('/exchange-request', async (req, res) => {
  try {
    const { from, to, amount, destinationAddress } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!from || !to || !amount || !destinationAddress) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }
    
    if (from !== 'TRX' && from !== 'USDT') {
      return res.status(400).json({ error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã TRX –∏ USDT' });
    }
    
    if (to !== 'TRX' && to !== 'USDT') {
      return res.status(400).json({ error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã TRX –∏ USDT' });
    }
    
    if (from === to) {
      return res.status(400).json({ error: '–í–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è' });
    }
    
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      return res.status(400).json({ error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ Tron
    if (!tronWeb.isAddress(destinationAddress)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å TRON' });
    }
    
    // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    const amountFloat = parseFloat(amount);
    let toAmount;
    let exchangeRate;
    
    if (from === 'TRX' && to === 'USDT') {
      exchangeRate = currentRates.TRX_TO_USDT;
      toAmount = amountFloat * exchangeRate; // 1 TRX = X USDT
    } else {
      exchangeRate = currentRates.USDT_TO_TRX;
      toAmount = amountFloat * exchangeRate; // 1 USDT = Y TRX
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const paymentId = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
    // –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ —Å "–ø–æ–¥–ø–∏—Å—å—é"
    const exactAmount = parseFloat((amountFloat + parseFloat('0.' + paymentId)).toFixed(6));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    const requestId = Date.now().toString(36) + Math.random().toString(36).substr(2);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    const expirationTime = Date.now() + 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
    
    exchangeRequests.set(requestId, {
      id: requestId,
      from,
      to,
      fromAmount: exactAmount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Å "–ø–æ–¥–ø–∏—Å—å—é"
      originalAmount: amountFloat, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
      toAmount,
      destinationAddress,
      status: 'pending',
      createdAt: Date.now(),
      expirationTime,
      txHash: null,
      paymentId // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    res.json({
      success: true,
      requestId,
      paymentDetails: {
        address: WALLET_ADDRESS,
        amount: exactAmount, // –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ —Å "–ø–æ–¥–ø–∏—Å—å—é"
        originalAmount: amountFloat, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        paymentId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        currency: from,
        toReceive: toAmount.toFixed(6),
        toCurrency: to,
        exchangeRate: from === 'TRX' ? currentRates.TRX_TO_USDT : currentRates.USDT_TO_TRX,
        expirationTime: new Date(expirationTime).toISOString(),
        message: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É ${exactAmount} –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞`
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    setTimeout(() => {
      checkTransactions().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      });
    }, 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
app.get('/exchange-rates', (req, res) => {
  res.json({
    success: true,
    rates: currentRates,
    cryptoRates: currentCryptoRates,
    fiatRates: currentFiatRates,
    lastUpdate: lastRatesUpdate ? lastRatesUpdate.toISOString() : null
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
app.get('/crypto-fiat-rate/:from/:to', (req, res) => {
  const { from, to } = req.params;
  const pair = `${from.toUpperCase()}-${to.toUpperCase()}`;
  
  try {
    const fromRate = currentCryptoRates[from.toUpperCase()] || currentFiatRates[from.toUpperCase()];
    const toRate = currentFiatRates[to.toUpperCase()] || currentCryptoRates[to.toUpperCase()];
    const margin = currentMargins[pair] || 0;
    
    if (!fromRate || !toRate) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞'
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
    let baseRate;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è USDT/USDC (—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ ‚âà USD)
    if ((from.toUpperCase() === 'USDT' || from.toUpperCase() === 'USDC') && to.toUpperCase() !== 'USD' && currentFiatRates[to.toUpperCase()]) {
      // USDT/USDC to Fiat: 1 USD / —Ü–µ–Ω–∞ —Ñ–∏–∞—Ç–∞ –≤ USD
      // –ù–∞–ø—Ä–∏–º–µ—Ä: EUR = 1.17 USD/EUR -> 1 USDT = 1/1.17 = 0.853 EUR
      baseRate = 1 / toRate;
    } else if (from.toUpperCase() !== 'USD' && currentFiatRates[from.toUpperCase()] && (to.toUpperCase() === 'USDT' || to.toUpperCase() === 'USDC')) {
      // Fiat to USDT/USDC: —Ü–µ–Ω–∞ —Ñ–∏–∞—Ç–∞ –≤ USD / 1 USD
      // –ù–∞–ø—Ä–∏–º–µ—Ä: EUR = 1.17 USD/EUR -> 1 EUR = 1.17 USDT
      baseRate = fromRate;
    } else if (currentCryptoRates[from.toUpperCase()] && currentFiatRates[to.toUpperCase()]) {
      // Crypto to Fiat: —Ü–µ–Ω–∞ –∫—Ä–∏–ø—Ç—ã –≤ USD / —Ü–µ–Ω–∞ —Ñ–∏–∞—Ç–∞ –≤ USD
      // –ù–∞–ø—Ä–∏–º–µ—Ä: TRX = 0.3 USD, EUR = 1.17 USD/EUR -> 1 TRX = 0.3/1.17 = 0.256 EUR
      baseRate = fromRate / toRate;
    } else if (currentFiatRates[from.toUpperCase()] && currentCryptoRates[to.toUpperCase()]) {
      // Fiat to Crypto: —Ü–µ–Ω–∞ —Ñ–∏–∞—Ç–∞ –≤ USD / —Ü–µ–Ω–∞ –∫—Ä–∏–ø—Ç—ã –≤ USD  
      // –ù–∞–ø—Ä–∏–º–µ—Ä: EUR = 1.17 USD/EUR, TRX = 0.3 USD -> 1 EUR = 1.17/0.3 = 3.9 TRX
      baseRate = fromRate / toRate;
    } else {
      baseRate = fromRate / toRate;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É
    const finalRate = baseRate * (1 + margin / 100);
    
    res.json({
      success: true,
      pair,
      baseRate: parseFloat(baseRate.toFixed(8)),
      margin: margin,
      finalRate: parseFloat(finalRate.toFixed(8)),
      lastUpdate: lastRatesUpdate ? lastRatesUpdate.toISOString() : null
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫—É—Ä—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫—É—Ä—Å–∞'
    });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
app.get('/margins', (req, res) => {
  res.json({
    success: true,
    margins: currentMargins
  });
});

app.post('/margins/:pair', (req, res) => {
  const { pair } = req.params;
  const { margin } = req.body;
  
  if (typeof margin !== 'number' || margin < 0 || margin > 100) {
    return res.status(400).json({
      success: false,
      error: '–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100'
    });
  }
  
  currentMargins[pair.toUpperCase()] = margin;
  
  console.log(`üìä –ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–∞—Ä—ã ${pair.toUpperCase()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${margin}%`);
  
  res.json({
    success: true,
    pair: pair.toUpperCase(),
    margin: margin
  });
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ Crypto-Fiat –æ–±–º–µ–Ω
app.post('/crypto-fiat-request', async (req, res) => {
  try {
    const { 
      type, 
      country, 
      city, 
      crypto, 
      fiat, 
      amount, 
      contact 
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!type || !country || !city || !crypto || !fiat || !amount || !contact) {
      return res.status(400).json({ 
        success: false, 
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      });
    }
    
    if (!contact.telegram && !contact.whatsapp) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    const pair = type === 'crypto-to-fiat' ? 
      `${crypto.symbol}-${fiat.symbol}` : 
      `${fiat.symbol}-${crypto.symbol}`;
    
    const rateResponse = await fetch(`http://localhost:3000/crypto-fiat-rate/${crypto.symbol}/${fiat.symbol}`);
    const rateData = await rateResponse.json();
    
    let calculatedAmount = 0;
    if (rateData.success) {
      calculatedAmount = type === 'crypto-to-fiat' ? 
        amount * rateData.finalRate : 
        amount / rateData.finalRate;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    const requestId = 'CF-' + Date.now().toString(36) + Math.random().toString(36).substr(2);
    
    const request = {
      id: requestId,
      type,
      country,
      city,
      crypto,
      fiat,
      amount: parseFloat(amount),
      calculatedAmount: parseFloat(calculatedAmount.toFixed(6)),
      contact,
      rate: rateData.success ? rateData.finalRate : null,
      margin: rateData.success ? rateData.margin : null,
      status: 'pending',
      createdAt: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ Telegram –≥—Ä—É–ø–ø—É
    console.log('üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ Crypto-Fiat –æ–±–º–µ–Ω:', request);
    
    if (global.sendCryptoFiatRequestToTelegram) {
      global.sendCryptoFiatRequestToTelegram(request);
    }
    
    res.json({
      success: true,
      requestId: request.id,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Crypto-Fiat –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/check-usdt-transactions/:requestId?', async (req, res) => {
  try {
    const requestId = req.params.requestId;
    let request = null;
    
    if (requestId) {
      if (!exchangeRequests.has(requestId)) {
        return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
      request = exchangeRequests.get(requestId);
      if (request.from !== 'USDT') {
        return res.status(400).json({ error: '–£–∫–∞–∑–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–æ–π –Ω–∞ –æ–±–º–µ–Ω USDT' });
      }
    }
    
    console.log(`–ó–∞–ø—É—â–µ–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ${requestId ? '–¥–ª—è –∑–∞—è–≤–∫–∏ ' + requestId : ''}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const trc20Transactions = await getTRC20Transactions(WALLET_ADDRESS);
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${trc20Transactions.length} TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    const contractHex = tronWeb.address.toHex(USDT_CONTRACT);
    console.log(`USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${USDT_CONTRACT} (hex: ${contractHex})`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const foundTransactions = [];
    let matchedRequest = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    for (const tx of trc20Transactions) {
      try {
        let isUsdtTx = false;
        let matchReason = '';
        
        if (tx.token_info) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
          const tokenAddress = tx.token_info.address;
          const contractHexNoPrefix = contractHex.replace(/^41/, '');
          const tokenAddressNoPrefix = tokenAddress.replace(/^(41|0x)/, '');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É (USDT) –∏/–∏–ª–∏ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
          const isSymbolUsdt = tx.token_info.symbol?.toUpperCase() === 'USDT';
          const isNameUsdt = tx.token_info.name?.toUpperCase().includes('USDT');
          
          if (tokenAddress === contractHex || tokenAddress === contractHex.replace(/^41/, '0x')) {
            isUsdtTx = true;
            matchReason = '–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞';
          } else if (tokenAddressNoPrefix === contractHexNoPrefix) {
            isUsdtTx = true;
            matchReason = '–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)';
          } else if (isSymbolUsdt) {
            isUsdtTx = true;
            matchReason = '—Å–∏–º–≤–æ–ª USDT';
          } else if (isNameUsdt) {
            isUsdtTx = true;
            matchReason = '–∏–º—è —Ç–æ–∫–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç USDT';
          }
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è USDT
        if (isUsdtTx) {
          // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
          const decimals = tx.token_info.decimals || 6;
          const divisor = Math.pow(10, decimals);
          const amountUsdt = parseFloat(tx.value) / divisor;
          
          const transactionData = {
            transactionId: tx.transaction_id,
            from: tx.from,
            to: tx.to,
            amount: amountUsdt,
            symbol: tx.token_info.symbol,
            timestamp: new Date(tx.block_timestamp).toISOString(),
            matchReason,
            isIncoming: tx.to === WALLET_ADDRESS
          };
          
          foundTransactions.push(transactionData);
          
          // –ï—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É
          if (request && tx.to === WALLET_ADDRESS) {
            const tolerance = 0.01; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—É–º–º
            const difference = Math.abs(amountUsdt - request.fromAmount);
            
            if (difference < tolerance) {
              console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}: ${amountUsdt} USDT (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: ${difference})`);
              await processUsdtPayment(request, { 
                txID: tx.transaction_id, 
                amount: amountUsdt 
              });
              matchedRequest = { 
                ...request, 
                matchDetails: { 
                  transactionId: tx.transaction_id,
                  expectedAmount: request.fromAmount,
                  actualAmount: amountUsdt,
                  difference
                } 
              };
            }
          }
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${err.message}`);
      }
    }
    
    res.json({
      success: true,
      transactions: foundTransactions,
      matchedRequest,
      totalFound: foundTransactions.length,
      requestId: request ? request.id : null
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
app.get('/exchange-status/:id', (req, res) => {
  const requestId = req.params.id;
  
  if (!exchangeRequests.has(requestId)) {
    return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  const request = exchangeRequests.get(requestId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞—è–≤–∫–∏
  if (request.status === 'pending' && Date.now() > request.expirationTime) {
    request.status = 'expired';
    exchangeRequests.set(requestId, request);
  }
  
  res.json({
    success: true,
    request: {
      id: request.id,
      status: request.status,
      from: request.from,
      to: request.to,
      fromAmount: request.fromAmount,
      originalAmount: request.originalAmount,
      toAmount: request.toAmount,
      destinationAddress: request.destinationAddress,
      paymentId: request.paymentId,
      createdAt: new Date(request.createdAt).toISOString(),
      expirationTime: new Date(request.expirationTime).toISOString(),
      txHash: request.txHash
    }
  });
});

// –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
async function checkTransactions() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const pendingRequests = Array.from(exchangeRequests.values())
      .filter(req => req.status === 'pending');
    
    if (pendingRequests.length === 0) return;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º ${pendingRequests.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫...`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ TRX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö TRX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${WALLET_ADDRESS}...`);
      const trxTransactions = await getIncomingTransactions(WALLET_ADDRESS);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TRX
      for (const tx of trxTransactions) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          if (tx.ret && tx.ret[0].contractRet === 'SUCCESS') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥—ã TRX
            if (tx.raw_data.contract[0].type === 'TransferContract') {
              const txValue = tx.raw_data.contract[0].parameter.value;
              
              // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ TRX
              const amountTrx = tronWeb.fromSun(txValue.amount);
              console.log(`–ù–∞–π–¥–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è TRX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É ${amountTrx} TRX (${tx.txID})`);
              
              // –ò—â–µ–º –∑–∞—è–≤–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–æ–π TRX
              for (const request of pendingRequests) {
                if (
                  request.from === 'TRX' && 
                  Math.abs(amountTrx - request.fromAmount) < 0.000001 &&
                  tx.raw_data.timestamp >= request.createdAt // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                ) {
                  console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}: ${amountTrx} TRX`);
                  await processTrxPayment(request, tx);
                  break;
                }
              }
            }
          }
        } catch (txError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TRX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}`);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TRC20 (USDT) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${WALLET_ADDRESS}...`);
      const trc20Transactions = await getTRC20Transactions(WALLET_ADDRESS);
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${trc20Transactions.length} TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –î–µ–±–∞–≥: –≤—ã–≤–æ–¥–∏–º —Ö–µ–∫—Å-–∞–¥—Ä–µ—Å USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const contractHex = tronWeb.address.toHex(USDT_CONTRACT);
      console.log(`–ê–¥—Ä–µ—Å USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${USDT_CONTRACT}`);
      console.log(`Hex USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractHex}`);
      console.log(`Hex USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (0x): ${contractHex.replace(/^41/, '0x')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      for (const tx of trc20Transactions) {
        try {
          console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${JSON.stringify(tx.token_info || {})}`);
          console.log(`–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: ${tx.token_info ? tx.token_info.address : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
          let isUsdtTx = false;
          
          if (tx.token_info) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
            const tokenAddress = tx.token_info.address;
            const contractHexNoPrefix = contractHex.replace(/^41/, '');
            const tokenAddressNoPrefix = tokenAddress.replace(/^(41|0x)/, '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É (USDT) –∏/–∏–ª–∏ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
            const isSymbolUsdt = tx.token_info.symbol?.toUpperCase() === 'USDT';
            const isNameUsdt = tx.token_info.name?.toUpperCase().includes('USDT');
            
            isUsdtTx = 
              tokenAddress === contractHex || 
              tokenAddress === contractHex.replace(/^41/, '0x') ||
              tokenAddressNoPrefix === contractHexNoPrefix ||
              isSymbolUsdt || 
              isNameUsdt;
              
            console.log(`–≠—Ç–æ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è? ${isUsdtTx} (${tx.token_info.symbol || '–Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞'})`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          if (isUsdtTx) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (tx.to === WALLET_ADDRESS) {
              // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ USDT
              const decimals = tx.token_info.decimals || 6;
              const divisor = Math.pow(10, decimals);
              const amountUsdt = parseFloat(tx.value) / divisor;
              
              console.log(`–ù–∞–π–¥–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É ${amountUsdt} USDT (${tx.transaction_id})`);
              console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—è–≤–∫–∞–º (${pendingRequests.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö)...`);
              
              // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              pendingRequests.forEach(req => {
                if (req.from === 'USDT') {
                  console.log(`–ó–∞—è–≤–∫–∞ ${req.id}: ${req.fromAmount} USDT, —Ä–∞–∑–Ω–∏—Ü–∞: ${Math.abs(amountUsdt - req.fromAmount)}`);
                }
              });
              
              // –ò—â–µ–º –∑–∞—è–≤–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–æ–π USDT —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
              for (const request of pendingRequests) {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è USDT
                const tolerance = 0.01; // –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–æ 0.01 USDT
                
                if (
                  request.from === 'USDT' && 
                  Math.abs(amountUsdt - request.fromAmount) < tolerance &&
                  tx.block_timestamp >= request.createdAt // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                ) {
                  console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}: ${amountUsdt} USDT (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: ${Math.abs(amountUsdt - request.fromAmount)})`);
                  await processUsdtPayment(request, { 
                    txID: tx.transaction_id, 
                    amount: amountUsdt 
                  });
                  break;
                }
              }
            } else {
              console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –Ω–µ –≤—Ö–æ–¥—è—â–∞—è (to: ${tx.to})`);
            }
          }
        } catch (txError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}`);
        }
      }
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
      try {
        const block = await tronWeb.trx.getCurrentBlock();
        console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ #${block.block_header.raw_data.number}`);
        
        if (block && block.transactions && block.transactions.length > 0) {
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${block.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫–µ`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∞ (–∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏)
          for (const tx of block.transactions) {
            try {
              const contractType = tx.raw_data.contract[0].type;
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TRX –ø–µ—Ä–µ–≤–æ–¥—ã
              if (contractType === 'TransferContract') {
                const txData = tx.raw_data.contract[0].parameter.value;
                const toAddress = txData.to;
                const hexWalletAddress = tronWeb.address.toHex(WALLET_ADDRESS);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞—à –∞–¥—Ä–µ—Å
                if (toAddress === hexWalletAddress) {
                  const amount = txData.amount;
                  const amountTrx = tronWeb.fromSun(amount);
                  console.log(`–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TRX –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ: ${amountTrx} TRX`);
                  
                  // –ò—â–µ–º –∑–∞—è–≤–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                  for (const request of pendingRequests) {
                    if (request.from === 'TRX' && Math.abs(amountTrx - request.fromAmount) < 0.000001) {
                      console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞—Ç–µ–∂ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}`);
                      await processTrxPayment(request, tx);
                      break;
                    }
                  }
                }
              }
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ TRC20 (USDT) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
              else if (contractType === 'TriggerSmartContract') {
                // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                const txData = tx.raw_data.contract[0].parameter.value;
                const contractAddress = txData.contract_address;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç?
                const hexUsdtContract = tronWeb.address.toHex(USDT_CONTRACT).replace(/^41/, '');
                const hexContractAddress = contractAddress.replace(/^41/, '');
                
                if (hexContractAddress === hexUsdtContract) {
                  console.log(`–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è USDT –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ`);
                  
                  try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã –∏ –∞–¥—Ä–µ—Å–∞
                    // –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ USDT –∑–∞—è–≤–∫–∏
                    // —á–µ—Ä–µ–∑ API –Ω–∞–ø—Ä—è–º—É—é
                    
                    const pendingUsdtRequests = pendingRequests.filter(req => req.from === 'USDT');
                    if (pendingUsdtRequests.length > 0) {
                      console.log(`–ù–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ USDT –∑–∞—è–≤–∫–∏ (${pendingUsdtRequests.length}). –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API...`);
                      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                      const trc20Txs = await getTRC20Transactions(WALLET_ADDRESS);
                      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ü–∏–∫–ª–µ
                    }
                  } catch (innerError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫–∞: ${innerError.message}`);
                  }
                }
              }
            } catch (txError) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∞: ${txError.message}`);
            }
          }
        }
      } catch (blockError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞:', blockError.message);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞—è–≤–∫–∏
      const currentTime = Date.now();
      for (const request of pendingRequests) {
        if (currentTime > request.expirationTime) {
          request.status = 'expired';
          exchangeRequests.set(request.id, request);
          console.log(`–ó–∞—è–≤–∫–∞ ${request.id} –∏—Å—Ç–µ–∫–ª–∞`);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ TRX
async function processTrxPayment(request, transaction) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if (request.status !== 'pending') {
      console.log(`–ó–∞—è–≤–∫–∞ ${request.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${request.status})`);
      return;
    }
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ TRX –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}`);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å USDT
    if (request.to === 'USDT') {
      try {
        const usdtContract = await tronWeb.contract().at(USDT_CONTRACT);
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT
        // USDT –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        const decimals = 6;
        const amountInt = Math.floor(parseFloat(request.toAmount) * Math.pow(10, decimals));
        
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${request.toAmount} USDT (${amountInt} –º–∏–∫—Ä–æ—é–Ω–∏—Ç–æ–≤) –Ω–∞ –∞–¥—Ä–µ—Å ${request.destinationAddress}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        const tx = await usdtContract.transfer(
          request.destinationAddress,
          amountInt.toString() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        ).send();
        
        console.log(`USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${tx}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.status = 'completed';
        request.txHash = tx;
        exchangeRequests.set(request.id, request);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω
        console.log(`–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}: ${request.fromAmount} ${request.from} -> ${request.toAmount} ${request.to}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ USDT: ${error.message}`);
        request.status = 'error';
        request.error = error.message;
        exchangeRequests.set(request.id, request);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TRX –ø–ª–∞—Ç–µ–∂–∞:', error);
    request.status = 'error';
    request.error = error.message;
    exchangeRequests.set(request.id, request);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ USDT
async function processUsdtPayment(request, event) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if (request.status !== 'pending') {
      console.log(`–ó–∞—è–≤–∫–∞ ${request.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${request.status})`);
      return;
    }
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ USDT –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}`);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å TRX
    if (request.to === 'TRX') {
      try {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TRX
        const amountSun = Math.floor(parseFloat(request.toAmount) * 1000000);
        
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${request.toAmount} TRX (${amountSun} —Å–∞–Ω) –Ω–∞ –∞–¥—Ä–µ—Å ${request.destinationAddress}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TRX –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const tx = await tronWeb.trx.sendTransaction(
          request.destinationAddress,
          amountSun // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö SUN
        );
        
        console.log(`TRX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${JSON.stringify(tx)}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.status = 'completed';
        request.txHash = tx.txid;
        exchangeRequests.set(request.id, request);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω
        console.log(`–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}: ${request.fromAmount} ${request.from} -> ${request.toAmount} ${request.to}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ TRX: ${error.message}`);
        request.status = 'error';
        request.error = error.message;
        exchangeRequests.set(request.id, request);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ USDT –ø–ª–∞—Ç–µ–∂–∞:', error);
    request.status = 'error';
    request.error = error.message;
    exchangeRequests.set(request.id, request);
  }
}

// –ò–∑–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
setInterval(checkTransactions, 15000);

// Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
const TelegramBot = require('node-telegram-bot-api');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || ''; // ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

let bot = null;

if (TELEGRAM_BOT_TOKEN) {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
  
  // –ö–æ–º–∞–Ω–¥–∞ /rates - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Ü–µ–Ω–∫–∏
  bot.onText(/\/rates/, (msg) => {
    const chatId = msg.chat.id;
    
    let message = 'üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º:*\n\n';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
    const cryptoGroups = {};
    Object.entries(currentMargins).forEach(([pair, margin]) => {
      const [from, to] = pair.split('-');
      if (!cryptoGroups[from]) {
        cryptoGroups[from] = [];
      }
      cryptoGroups[from].push({ to, margin, pair });
    });
    
    Object.entries(cryptoGroups).forEach(([crypto, pairs]) => {
      message += `*${crypto}:*\n`;
      pairs.forEach(({ to, margin, pair }) => {
        message += `  ${crypto} ‚Üí ${to}: ${margin}%\n`;
      });
      message += '\n';
    });
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const keyboard = {
      inline_keyboard: []
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const pairButtons = Object.entries(currentMargins).map(([pair, margin]) => ({
      text: `${pair}: ${margin}%`,
      callback_data: `edit_${pair}`
    }));
    
    for (let i = 0; i < pairButtons.length; i += 2) {
      keyboard.inline_keyboard.push(pairButtons.slice(i, i + 2));
    }
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /rate PAIR MARGIN - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É
  bot.onText(/\/rate (\w+-\w+) (\d+(?:\.\d+)?)%?/, (msg, match) => {
    const chatId = msg.chat.id;
    const pair = match[1].toUpperCase();
    const margin = parseFloat(match[2]);
    
    if (margin < 0 || margin > 100) {
      bot.sendMessage(chatId, '‚ùå –ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%');
      return;
    }
    
    currentMargins[pair] = margin;
    
    bot.sendMessage(chatId, `‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–∞—Ä—ã *${pair}* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *${margin}%*`, {
      parse_mode: 'Markdown'
    });
    
    console.log(`üìä Telegram: –ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–∞—Ä—ã ${pair} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${margin}%`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    
    if (data.startsWith('edit_')) {
      const pair = data.replace('edit_', '');
      const currentMargin = currentMargins[pair] || 0;
      
      bot.sendMessage(message.chat.id, 
        `–¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–∞—Ä—ã *${pair}*: ${currentMargin}%\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `\`/rate ${pair} –ù–û–í–ê–Ø_–ù–ê–¶–ï–ù–ö–ê\`\n\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: \`/rate ${pair} 5\``,
        { parse_mode: 'Markdown' }
      );
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    bot.answerCallbackQuery(callbackQuery.id);
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram –≥—Ä—É–ø–ø—É
  const sendCryptoFiatRequestToTelegram = (request) => {
    if (!ADMIN_CHAT_ID) return;
    
    const typeText = request.type === 'crypto-to-fiat' ? 
      'üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Üí –ù–∞–ª–∏—á–Ω—ã–µ' : 'üí≥ –ù–∞–ª–∏—á–Ω—ã–µ ‚Üí –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞';
    
    let message = `üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω*\n\n`;
    message += `${typeText}\n\n`;
    message += `üåç *–°—Ç—Ä–∞–Ω–∞:* ${request.country}\n`;
    message += `üèô *–ì–æ—Ä–æ–¥:* ${request.city}\n\n`;
    
    if (request.type === 'crypto-to-fiat') {
      message += `üì§ *–û—Ç–¥–∞–µ—Ç:* ${request.amount} ${request.crypto.symbol}\n`;
      message += `üì• *–ü–æ–ª—É—á–∞–µ—Ç:* ~${request.calculatedAmount} ${request.fiat.symbol}\n`;
    } else {
      message += `üì§ *–û—Ç–¥–∞–µ—Ç:* ${request.amount} ${request.fiat.symbol}\n`;
      message += `üì• *–ü–æ–ª—É—á–∞–µ—Ç:* ~${request.calculatedAmount} ${request.crypto.symbol}\n`;
    }
    
    if (request.rate && request.margin) {
      message += `üìä *–ö—É—Ä—Å:* ${request.rate.toFixed(6)}\n`;
      message += `üìà *–ù–∞—Ü–µ–Ω–∫–∞:* ${request.margin}%\n`;
    }
    
    message += `\nüìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n`;
    if (request.contact.telegram) {
      message += `üì± Telegram: @${request.contact.telegram.replace('@', '')}\n`;
    }
    if (request.contact.whatsapp) {
      message += `üìû WhatsApp: ${request.contact.whatsapp}\n`;
    }
    message += `‚úÖ *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π:* ${request.contact.preferred === 'telegram' ? 'Telegram' : 'WhatsApp'}\n`;
    
    message += `\nüÜî *ID –∑–∞—è–≤–∫–∏:* \`${request.id}\``;
    message += `\nüïê *–í—Ä–µ–º—è:* ${new Date(request.createdAt).toLocaleString('ru-RU')}`;
    
    bot.sendMessage(ADMIN_CHAT_ID, message, { parse_mode: 'Markdown' });
  };
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
  global.sendCryptoFiatRequestToTelegram = sendCryptoFiatRequestToTelegram;
  
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
} else {
  console.log('‚ö†Ô∏è  Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN)');
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${WALLET_ADDRESS}`);
  console.log(`üîó –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (HEX): ${tronWeb.address.toHex(WALLET_ADDRESS)}`);
  
  if (TELEGRAM_BOT_TOKEN) {
    console.log('ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω');
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('   /rates - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Ü–µ–Ω–∫–∏');
    console.log('   /rate PAIR MARGIN - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /rate TRX-EUR 5)');
  }
}); 