import { useState, useEffect } from 'react';

export interface ExchangeRates {
  TRX_TO_USDT: number; // 1 TRX = X USDT
  USDT_TO_TRX: number; // 1 USDT = Y TRX
}

export interface RatesResponse {
  success: boolean;
  rates: ExchangeRates;
  lastUpdate: string | null;
}

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
const DEFAULT_RATES = {
  TRX_TO_USDT: 0.085,
  USDT_TO_TRX: 11.76
};

// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
const ratesStore = {
  rates: { ...DEFAULT_RATES },
  lastUpdate: null as string | null,
  isLoading: false,
  listeners: new Set<() => void>(),

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  subscribe(listener: () => void) {
    this.listeners.add(listener);
    return () => {
      this.listeners.delete(listener);
    };
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  updateRates(rates: ExchangeRates, lastUpdate: string | null) {
    this.rates = rates;
    this.lastUpdate = lastUpdate;
    this.notifyListeners();
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  notifyListeners() {
    this.listeners.forEach(listener => listener());
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  setLoading(isLoading: boolean) {
    this.isLoading = isLoading;
    this.notifyListeners();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
export async function fetchExchangeRates(): Promise<RatesResponse> {
  console.log(`[${new Date().toLocaleTimeString()}] üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...`);
  
  try {
    ratesStore.setLoading(true);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    const API_URL = import.meta.env.VITE_API_URL || (import.meta.env.PROD ? '/api' : 'http://localhost:3000');
    const response = await fetch(`${API_URL}/exchange-rates`, {
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (data.success && data.exchangeRates) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å—ã TRX/USDT –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      const trxToUsdt = data.exchangeRates['TRX-USDT'];
      const usdtToTrx = data.exchangeRates['USDT-TRX'];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
      if (trxToUsdt > 0 && usdtToTrx > 0) {
        const rates = {
          TRX_TO_USDT: trxToUsdt,
          USDT_TO_TRX: usdtToTrx
        };
        
        ratesStore.updateRates(rates, data.lastUpdate);
        console.log('‚úÖ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
          'TRX ‚Üí USDT': rates.TRX_TO_USDT,
          'USDT ‚Üí TRX': rates.USDT_TO_TRX,
          '–û–±–Ω–æ–≤–ª–µ–Ω–æ': data.lastUpdate ? new Date(data.lastUpdate).toLocaleTimeString() : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        });
        
        return {
          success: true,
          rates: rates,
          lastUpdate: data.lastUpdate
        };
      } else {
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞');
      }
    } else {
      throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
    }
  } catch (error: any) {
    if (error.name === 'AbortError') {
      console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞:', error.message);
    }
    
    return {
      success: false,
      rates: ratesStore.rates,
      lastUpdate: ratesStore.lastUpdate
    };
  } finally {
    ratesStore.setLoading(false);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
export async function checkUsdtTransactions(requestId: string): Promise<any> {
  try {
    const API_URL = import.meta.env.VITE_API_URL || (import.meta.env.PROD ? '/api' : 'http://localhost:3000');
    const response = await fetch(`${API_URL}/check-usdt-transactions/${requestId}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    throw error;
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö React
export function useExchangeRates() {
  const [rates, setRates] = useState<ExchangeRates>(ratesStore.rates);
  const [lastUpdate, setLastUpdate] = useState<string | null>(ratesStore.lastUpdate);
  const [isLoading, setIsLoading] = useState<boolean>(ratesStore.isLoading);

  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const unsubscribe = ratesStore.subscribe(() => {
      setRates(ratesStore.rates);
      setLastUpdate(ratesStore.lastUpdate);
      setIsLoading(ratesStore.isLoading);
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (!ratesStore.lastUpdate) {
      fetchExchangeRates();
    }

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return unsubscribe;
  }, []);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const interval = setInterval(() => {
      fetchExchangeRates();
    }, 60 * 1000); // 1 –º–∏–Ω—É—Ç–∞
    
    return () => clearInterval(interval);
  }, []);

  return { 
    rates, 
    lastUpdate, 
    isLoading, 
    refreshRates: fetchExchangeRates 
  };
} 