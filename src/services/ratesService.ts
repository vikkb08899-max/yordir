import { useState, useEffect } from 'react';

export interface ExchangeRates {
  TRX_TO_USDT: number; // 1 TRX = X USDT
  USDT_TO_TRX: number; // 1 USDT = Y TRX
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
  [key: string]: number;
}

export interface RatesResponse {
  success: boolean;
  rates: ExchangeRates;
  lastUpdate: string | null;
}

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
const DEFAULT_RATES: ExchangeRates = {
  TRX_TO_USDT: 0.085,
  USDT_TO_TRX: 11.76,
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
  'TRON-USD': 0.085,
  'TRON-EUR': 0.078,
  'TRON-PLN': 0.34,
  'TRON-UAH': 3.15,
  'USDT-USD': 1.0,
  'USDT-EUR': 0.92,
  'USDT-PLN': 4.0,
  'USDT-UAH': 37.0,
  'SOL-USD': 98.5,
  'SOL-EUR': 90.6,
  'SOL-PLN': 393.4,
  'SOL-UAH': 3645.5,
  'BTC-USD': 43250,
  'BTC-EUR': 39790,
  'BTC-PLN': 172800,
  'BTC-UAH': 1600000,
  'ETH-USD': 2650,
  'ETH-EUR': 2438,
  'ETH-PLN': 10585,
  'ETH-UAH': 98000,
  'USDC-USD': 1.0,
  'USDC-EUR': 0.92,
  'USDC-PLN': 4.0,
  'USDC-UAH': 37.0
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è CoinGecko API
const COINGECKO_CONFIG = {
  BASE_URL: 'https://api.coingecko.com/api/v3',
  UPDATE_INTERVAL: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤)
  BATCH_DELAY: 60 * 1000, // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
  REQUEST_DELAY: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
  TIMEOUT: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
};

// –ú–∞–ø–ø–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ CoinGecko ID
const CRYPTO_IDS = {
  TRX: 'tron',
  USDT: 'tether',
  SOL: 'solana',
  BTC: 'bitcoin',
  ETH: 'ethereum',
  USDC: 'usd-coin'
};

// –ú–∞–ø–ø–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ Coinpaprika ID
const COINPAPRIKA_IDS = {
  TRX: 'trx-tron',
  USDT: 'usdt-tether',
  SOL: 'sol-solana',
  BTC: 'btc-bitcoin',
  ETH: 'eth-ethereum',
  USDC: 'usdc-usd-coin'
};

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
const FIAT_CURRENCIES = ['usd', 'eur', 'pln', 'uah'];

// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
const ratesStore = {
  rates: { ...DEFAULT_RATES },
  lastUpdate: null as string | null,
  isLoading: false,
  listeners: new Set<() => void>(),
  cache: new Map<string, { rate: number; timestamp: number }>(),

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  subscribe(listener: () => void) {
    this.listeners.add(listener);
    return () => {
      this.listeners.delete(listener);
    };
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  updateRates(rates: ExchangeRates, lastUpdate: string | null) {
    this.rates = rates;
    this.lastUpdate = lastUpdate;
    this.notifyListeners();
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  notifyListeners() {
    this.listeners.forEach(listener => listener());
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  setLoading(isLoading: boolean) {
    this.isLoading = isLoading;
    this.notifyListeners();
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
  cacheRate(key: string, rate: number) {
    this.cache.set(key, { rate, timestamp: Date.now() });
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
  getCachedRate(key: string): number | null {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < COINGECKO_CONFIG.UPDATE_INTERVAL) {
      return cached.rate;
    }
    return null;
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  needsUpdate(): boolean {
    if (!this.lastUpdate) return true;
    return Date.now() - new Date(this.lastUpdate).getTime() > COINGECKO_CONFIG.UPDATE_INTERVAL;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å Coinpaprika —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
async function fetchCoinpaprikaRate(cryptoId: string, fiatCurrency: string): Promise<number | null> {
  const cacheKey = `${cryptoId}-${fiatCurrency}-paprika`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedRate = ratesStore.getCachedRate(cacheKey);
  if (cachedRate !== null) {
    return cachedRate;
  }

  const API_URL = import.meta.env.VITE_API_URL || (import.meta.env.PROD ? '/api' : 'http://localhost:3000');

  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), COINGECKO_CONFIG.TIMEOUT);

    const response = await fetch(
      `${API_URL}/coinpaprika/${cryptoId}/${fiatCurrency}`,
      { signal: controller.signal }
    );

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    
    if (result.success && result.data && result.data.price) {
      const rate = result.data.price;

      if (rate && typeof rate === 'number') {
        ratesStore.cacheRate(cacheKey, rate);
        return rate;
      }
    }

    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ Coinpaprika ${cryptoId}/${fiatCurrency}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å CoinGecko —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
async function fetchCoinGeckoRate(cryptoId: string, fiatCurrency: string): Promise<number | null> {
  const cacheKey = `${cryptoId}-${fiatCurrency}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedRate = ratesStore.getCachedRate(cacheKey);
  if (cachedRate !== null) {
    return cachedRate;
  }

  const API_URL = import.meta.env.VITE_API_URL || (import.meta.env.PROD ? '/api' : 'http://localhost:3000');

  // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), COINGECKO_CONFIG.TIMEOUT);

    const response = await fetch(
      `${API_URL}/coingecko/${cryptoId}/${fiatCurrency}`,
      { signal: controller.signal }
    );

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    
    if (result.success && result.data) {
      const rate = result.data[cryptoId]?.[fiatCurrency];

      if (rate && typeof rate === 'number') {
        ratesStore.cacheRate(cacheKey, rate);
        return rate;
      }
    }

    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ ${cryptoId}/${fiatCurrency}:`, error);
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    try {
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${cryptoId}/${fiatCurrency}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), COINGECKO_CONFIG.TIMEOUT);

      const response = await fetch(
        `${API_URL}/coingecko-alt/${cryptoId}/${fiatCurrency}`,
        { signal: controller.signal }
      );

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      
      if (result.success && result.data) {
        const rate = result.data[cryptoId]?.[fiatCurrency];

        if (rate && typeof rate === 'number') {
          ratesStore.cacheRate(cacheKey, rate);
          return rate;
        }
      }

      return null;
    } catch (altError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ ${cryptoId}/${fiatCurrency}:`, altError);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∫–∞–∫ fallback
      const staticKey = `${cryptoId.toUpperCase()}-${fiatCurrency.toUpperCase()}`;
      const staticRate = DEFAULT_RATES[staticKey];
      
      if (staticRate) {
        console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å –¥–ª—è ${staticKey}: ${staticRate}`);
        ratesStore.cacheRate(cacheKey, staticRate);
        return staticRate;
      }
      
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –±–∞—Ç—á–∞–º–∏
async function fetchRatesBatch(cryptoIds: string[], fiatCurrencies: string[]): Promise<Map<string, number>> {
  const rates = new Map<string, number>();

  for (const cryptoId of cryptoIds) {
    for (const fiatCurrency of fiatCurrencies) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ID
      const isCoinpaprikaId = cryptoId.includes('-');
      
      if (isCoinpaprikaId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Coinpaprika
        const rate = await fetchCoinpaprikaRate(cryptoId, fiatCurrency);
        if (rate !== null) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          const standardId = cryptoId.split('-')[0]; // –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (trx, usdt, etc.)
          rates.set(`${standardId}-${fiatCurrency}`, rate);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko
        const rate = await fetchCoinGeckoRate(cryptoId, fiatCurrency);
        if (rate !== null) {
          rates.set(`${cryptoId}-${fiatCurrency}`, rate);
        }
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await delay(COINGECKO_CONFIG.REQUEST_DELAY);
    }
  }

  return rates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
function useStaticRates(): RatesResponse {
  console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ API');
  const lastUpdate = new Date().toISOString();
  ratesStore.updateRates(DEFAULT_RATES, lastUpdate);
  
  return {
    success: true,
    rates: DEFAULT_RATES,
    lastUpdate
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞
export async function fetchExchangeRates(): Promise<RatesResponse> {
  console.log(`[${new Date().toLocaleTimeString()}] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (!ratesStore.needsUpdate()) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã');
    return {
      success: true,
      rates: ratesStore.rates,
      lastUpdate: ratesStore.lastUpdate
    };
  }

  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...');
  ratesStore.setLoading(true);

  try {
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –¥–≤–∞ –±–∞—Ç—á–∞
    const cryptoIds = Object.values(CRYPTO_IDS);
    const coinpaprikaIds = Object.values(COINPAPRIKA_IDS);
    const batch1 = cryptoIds.slice(0, Math.ceil(cryptoIds.length / 2));
    const batch2 = cryptoIds.slice(Math.ceil(cryptoIds.length / 2));
    const paprikaBatch1 = coinpaprikaIds.slice(0, Math.ceil(coinpaprikaIds.length / 2));
    const paprikaBatch2 = coinpaprikaIds.slice(Math.ceil(coinpaprikaIds.length / 2));

    console.log('üì¶ –ë–∞—Ç—á 1 (CoinGecko):', batch1);
    console.log('üì¶ –ë–∞—Ç—á 1 (Coinpaprika):', paprikaBatch1);
    const rates1 = await fetchRatesBatch(paprikaBatch1, FIAT_CURRENCIES);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫—É—Ä—Å—ã
    if (rates1.size === 0) {
      console.log('‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –±–∞—Ç—á –Ω–µ –≤–µ—Ä–Ω—É–ª –∫—É—Ä—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ');
      return useStaticRates();
    }
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º –±–∞—Ç—á–µ–º...');
    await delay(COINGECKO_CONFIG.BATCH_DELAY);
    
    console.log('üì¶ –ë–∞—Ç—á 2 (CoinGecko):', batch2);
    console.log('üì¶ –ë–∞—Ç—á 2 (Coinpaprika):', paprikaBatch2);
    const rates2 = await fetchRatesBatch(paprikaBatch2, FIAT_CURRENCIES);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allRates = new Map([...rates1, ...rates2]);

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫—É—Ä—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
    if (allRates.size < 5) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ ${allRates.size} –∫—É—Ä—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ`);
      return useStaticRates();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫—É—Ä—Å–æ–≤
    const exchangeRates: ExchangeRates = { ...DEFAULT_RATES };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã TRX/USDT
    const trxUsdRate = allRates.get('tron-usd');
    if (trxUsdRate) {
      exchangeRates.TRX_TO_USDT = trxUsdRate;
      exchangeRates.USDT_TO_TRX = 1 / trxUsdRate;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
    allRates.forEach((rate, key) => {
      exchangeRates[key.toUpperCase()] = rate;
    });

    const lastUpdate = new Date().toISOString();
    ratesStore.updateRates(exchangeRates, lastUpdate);

    console.log('‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
      'TRX ‚Üí USDT': exchangeRates.TRX_TO_USDT,
      'USDT ‚Üí TRX': exchangeRates.USDT_TO_TRX,
      '–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤': allRates.size,
      '–û–±–Ω–æ–≤–ª–µ–Ω–æ': new Date(lastUpdate).toLocaleTimeString()
    });

    return {
      success: true,
      rates: exchangeRates,
      lastUpdate
    };

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error.message);
    
    // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã
    return useStaticRates();
  } finally {
    ratesStore.setLoading(false);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
export async function checkUsdtTransactions(requestId: string): Promise<any> {
  try {
    const API_URL = import.meta.env.VITE_API_URL || (import.meta.env.PROD ? '/api' : 'http://localhost:3000');
    const response = await fetch(`${API_URL}/check-usdt-transactions/${requestId}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    throw error;
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö React
export function useExchangeRates() {
  const [rates, setRates] = useState<ExchangeRates>(ratesStore.rates);
  const [lastUpdate, setLastUpdate] = useState<string | null>(ratesStore.lastUpdate);
  const [isLoading, setIsLoading] = useState<boolean>(ratesStore.isLoading);

  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const unsubscribe = ratesStore.subscribe(() => {
      setRates(ratesStore.rates);
      setLastUpdate(ratesStore.lastUpdate);
      setIsLoading(ratesStore.isLoading);
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (!ratesStore.lastUpdate) {
      fetchExchangeRates();
    }

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return unsubscribe;
  }, []);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  useEffect(() => {
    const interval = setInterval(() => {
      fetchExchangeRates();
    }, COINGECKO_CONFIG.UPDATE_INTERVAL);
    
    return () => clearInterval(interval);
  }, []);

  return { 
    rates, 
    lastUpdate, 
    isLoading, 
    refreshRates: fetchExchangeRates 
  };
} 